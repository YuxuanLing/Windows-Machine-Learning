resources:

- repo: self
  clean: true

variables:
  SamplesBin: SamplesBin
  WINDOWS_WINMD: C:\Program Files (x86)\Windows Kits\10\UnionMetadata\10.0.18362.0\Windows.winmd

strategy:
  maxParallel: 8
  matrix:
    Release_x64:
      BuildPlatform: x64
      BuildConfiguration: Release
    Debug_x64:
      BuildPlatform: x64
      BuildConfiguration: Debug
    Release_x86:
      BuildPlatform: x86
      BuildConfiguration: Release
    Debug_x86:
      BuildPlatform: x86
      BuildConfiguration: Debug

pool:
  name: DirectML-Build
#  demands: agent.osversion -equals 10.0.17763

# CI trigger
trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - Tools

# PR validation trigger
pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - Tools

steps: 
  - task: PowerShell@2
    displayName: 'Check SDK Version 18362 is present'
    inputs:
      targetType: inline
      script: dir "${ENV:programfiles(x86)}\windows Kits\10\include\10.0.18362.0\"
    
  - task: DotNetCoreInstaller@0
    displayName: 'Use .NET Core sdk 2.1.300'
    inputs:
      version: 2.1.300
    condition: succeededOrFailed()

  - task: NuGetToolInstaller@0
    displayName: 'Use NuGet 4.9.2'
    inputs:
      versionSpec: 4.9.2
    condition: succeededOrFailed()

  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
    displayName: 'NuGet restore'
    condition: succeededOrFailed()

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'specific'
      project: '274e76ac-6b29-4f77-a85d-7914c77cabd5'
      definition: '39810'
      buildVersionToDownload: 'latest'
      targetPath: '$(System.DefaultWorkingDirectory)\buildArtifacts'
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build UI test solution Testing/**/SamplesTest.sln'
    inputs:
      solution: 'Testing/**/SamplesTest.sln'
      vsVersion: 15.0
      msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\SamplesTest\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build BatchSupport Sample'
    inputs:
      solution: Samples/BatchSupport/BatchSupport.sln
      vsVersion: 15.0
      msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\BatchSupport\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: CopyFiles@2
    displayName: 'copy dlls to BatchSupport Sample'
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)\buildArtifacts\$(BuildPlatform)-win-inbox-$(BuildConfiguration)\bin'
      Contents: |
        windows.ai.machinelearning.dll
        onnxruntime.dll
        DirectML.dll
        DirectML.pdb
        onnxruntime.pdb
        windows.ai.machinelearning.pdb
      TargetFolder: '$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\BatchSupport\'
    condition: succeededOrFailed()

  - task: PowerShell@2
    displayName: 'Test BatchSupport Sample'
    inputs:
      targetType: 'inline'
      script: |
        .\BatchSupport.exe freeBatchSize TensorFloat
        .\BatchSupport.exe fixedBatchSize TensorFloat
        .\BatchSupport.exe fixedBatchSize VideoFrame
        .\BatchSupport.exe freeBatchSize VideoFrame
      workingDirectory: '$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\BatchSupport\'
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build AdapterSelection Sample'
    inputs:
      solution: Samples/AdapterSelection/AdapterSelection.sln
      vsVersion: 15.0
      msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\AdapterSelection\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build CustomOperator Sample'
    inputs:
      solution: Samples/CustomOperator/desktop/cpp/custom-operator-sample.sln
      vsVersion: 15.0
      msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\CustomOperator\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: CopyFiles@2
    displayName: 'copy dlls to CustomOperator Sample'
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)\buildArtifacts\$(BuildPlatform)-win-inbox-$(BuildConfiguration)\bin'
      Contents: |
        windows.ai.machinelearning.dll
        onnxruntime.dll
        DirectML.dll
        DirectML.pdb
        onnxruntime.pdb
        windows.ai.machinelearning.pdb
      TargetFolder: '$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\CustomOperator\'
    condition: succeededOrFailed()
  - task: PowerShell@2
    displayName: 'Test CustomOperator Sample'
    inputs:
      targetType: 'inline'
      script: |
        .\custom-operator-sample.exe relu
        .\custom-operator-sample.exe debug
        .\custom-operator-sample.exe relu_gpu
        .\custom-operator-sample.exe noisyrelu
    condition: succeededOrFailed()
  - task: VSBuild@1
    displayName: 'Build MNIST-Tutorial-cs Sample'
    inputs:
      solution: 'Samples/MNIST/Tutorial/cs/mnist_demo.sln'
      vsVersion: 15.0
      msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\MNIST-Tutorial\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build MNIST-UWP-cs Sample'
    inputs:
      solution: 'Samples/MNIST/UWP/cs/mnist_demo.sln'
      vsVersion: 15.0
      msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\MNIST-cs\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build SqueezenetObjectDetection Sample'
    inputs:
      solution: Samples/SqueezeNetObjectDetection/squeezenetobjectdetection.sln
      vsVersion: 15.0
      msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\SqueezeNetObjectDetection\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build FNSCandyStyleTransfer-UWP-CS Sample'
    inputs:
      solution: Samples/FNSCandyStyleTransfer/UWP/CS/snapcandy.sln
      vsVersion: 15.0
      msbuildArgs: '-v:diag  /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\FNSCandyStyleTransfer\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build MNIST-UWP-cppcx Sample'
    inputs:
      solution: 'Samples/MNIST/UWP/cppcx/mnist_cppcx.sln'
      vsVersion: 15.0
      msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\MNIST-cppcx\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build CustomTensorization Sample'
    inputs:
      solution: Samples/CustomTensorization/CustomTensorization.sln
      vsVersion: 15.0
      msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\CustomTensorization\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: CopyFiles@2
    displayName: 'copy dlls to CustomTensorization Sample'
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)\buildArtifacts\$(BuildPlatform)-win-inbox-$(BuildConfiguration)\bin'
      Contents: |
        windows.ai.machinelearning.dll
        onnxruntime.dll
        DirectML.dll
        DirectML.pdb
        onnxruntime.pdb
        windows.ai.machinelearning.pdb
      TargetFolder: '$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\CustomTensorization\'
    condition: succeededOrFailed()
  - task: PowerShell@2
    displayName: 'Test CustomTensorization Sample'
    inputs:
      targetType: 'inline'
      script: '.\CustomTensorization.exe'
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build Emoji Sample'
    inputs:
      solution: Samples/Emoji8/UWP/cs/Emoji8.sln
      vsVersion: 15.0
      msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\Emoji8\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: VSBuild@1
    displayName: 'Build StreamFromResource Sample'
    inputs:
      solution: Samples/StreamFromResource/StreamFromResource.sln
      vsVersion: 15.0
      msbuildArgs: '-v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\StreamFromResource\'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true
    condition: succeededOrFailed()

  - task: CopyFiles@2
    displayName: 'copy dlls to StreamFromResource Sample'
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)\buildArtifacts\$(BuildPlatform)-win-inbox-$(BuildConfiguration)\bin'
      Contents: |
        windows.ai.machinelearning.dll
        onnxruntime.dll
        DirectML.dll
        DirectML.pdb
        onnxruntime.pdb
        windows.ai.machinelearning.pdb
      TargetFolder: '$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\StreamFromResource\'
    condition: succeededOrFailed()
  - task: PowerShell@2
    displayName: 'Test StreamFromResource Sample'
    inputs:
      targetType: 'inline'
      script: '.\StreamFromResource.exe'
    condition: succeededOrFailed()

  - task: CopyFiles@2
    inputs:
      targetFolder: '$(Build.ArtifactStagingDirectory)\$(BuildPlatform)\$(BuildConfiguration)\'
      sourceFolder: '$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\'
      Contents: |
        **\SamplesTest\**
        **\AppPackages\**
    condition: succeededOrFailed()

  - task: CopyFiles@2
    inputs:
      targetFolder: '$(Build.ArtifactStagingDirectory)\$(BuildPlatform)\$(BuildConfiguration)\'
      sourceFolder: '$(System.DefaultWorkingDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\'
      Contents: |
        ?(AdapterSelection|CustomOperator|CustomTensorization)**\*
        SqueezeNetObjectDetection\*
    condition: succeededOrFailed()

  - task: CopyFiles@2
    inputs:
      targetFolder: '$(Build.ArtifactStagingDirectory)\$(BuildPlatform)\$(BuildConfiguration)\SharedContent'
      sourceFolder: 'SharedContent'
      contents: '**\*'
    condition: succeededOrFailed()
   

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Samples'
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: WinMLPublicSamples-RS5
    condition: succeededOrFailed()
